using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using OSGeo;
using OSGeo.FDO;
using OSGeo.FDO.Commands;
using OSGeo.FDO.Geometry;
using OSGeo.FDO.Spatial;
using OSGeo.FDO.Expression;

// link:https://wenku.baidu.com/view/979153202f60ddccda38a0c6.html

namespace FDOStart
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void create_db_Click(object sender, EventArgs e)
        {
            String dbName = this.text_DB_Name.Text;
            if ( System.IO.File.Exists(dbName) )
            {
                MessageBox.Show("文件已经存在", "Error");
                return;
            }
            // create Database
            OSGeo.FDO.Connections.IConnection IConn = OSGeo.FDO.ClientServices.FeatureAccessManager.GetConnectionManager().CreateConnection("OSGeo.SQLite");
            OSGeo.FDO.Commands.DataStore.ICreateDataStore cmd = 
                IConn.CreateCommand(OSGeo.FDO.Commands.CommandType.CommandType_CreateDataStore) as OSGeo.FDO.Commands.DataStore.ICreateDataStore;
            var dsprps = cmd.DataStoreProperties;
            dsprps.SetProperty("File", dbName);
            cmd.Execute();
        }

        private void Open_DB_Click(object sender, EventArgs e)
        {
            //Open Database
            String dbName = this.text_openDB.Text;
            OSGeo.FDO.Connections.IConnection IConn = OSGeo.FDO.ClientServices.FeatureAccessManager.GetConnectionManager().CreateConnection("OSGeo.SQLite");
            OSGeo.FDO.Commands.DataStore.ICreateDataStore cmd =
                IConn.CreateCommand(OSGeo.FDO.Commands.CommandType.CommandType_CreateDataStore) as OSGeo.FDO.Commands.DataStore.ICreateDataStore;
            IConn.ConnectionString = "File=" + dbName + ";ReadOnly=FALSE";
            IConn.Open();
            m_IConn = IConn;
        }

        private void create_Schema_Click(object sender, EventArgs e)
        {
            // 创建Schema ， 先创建一个“道路”的要素类，再为该要素类创建了一个"Tongjie"的Schema.
            // Schema赋予标识属性("FeatId")、数据属性("道路长度"),几何属性("Geometry")，
            // 最后设置FeatureClass 到对应的Schema的Class集中。
            OSGeo.FDO.Commands.Schema.IApplySchema pdbSchemaCom = m_IConn.CreateCommand(OSGeo.FDO.Commands.CommandType.CommandType_ApplySchema) 
                as OSGeo.FDO.Commands.Schema.IApplySchema;
            OSGeo.FDO.Schema.FeatureSchema pschema = new OSGeo.FDO.Schema.FeatureSchema("tongji", "");
            OSGeo.FDO.Schema.ClassCollection pClassCollection = pschema.Classes;
            OSGeo.FDO.Schema.FeatureClass pFeatureClass = new OSGeo.FDO.Schema.FeatureClass("Road", "");

            OSGeo.FDO.Schema.PropertyDefinitionCollection pPropDefCol = pFeatureClass.Properties;
            OSGeo.FDO.Schema.DataPropertyDefinitionCollection pDataProDefCol = pFeatureClass.IdentityProperties;

            // 标识数据
            OSGeo.FDO.Schema.DataPropertyDefinition pIdentityDataPro = new OSGeo.FDO.Schema.DataPropertyDefinition("FeatId", "");
            pIdentityDataPro.DataType = OSGeo.FDO.Schema.DataType.DataType_Int32;
            pIdentityDataPro.ReadOnly = true;
            pIdentityDataPro.Nullable = false;
            pIdentityDataPro.IsAutoGenerated = true;

            pPropDefCol.Add(pIdentityDataPro);
            pDataProDefCol.Add(pIdentityDataPro);

            // 添加一条道路长度属性
            OSGeo.FDO.Schema.DataPropertyDefinition pDataPro = new OSGeo.FDO.Schema.DataPropertyDefinition("道路长度", "");
            pDataPro.DataType = OSGeo.FDO.Schema.DataType.DataType_Double;
            pDataPro.ReadOnly = false;
            pDataPro.Nullable = true;
            pDataPro.IsAutoGenerated = false;
            pPropDefCol.Add(pDataPro);

            // 几何数据
            OSGeo.FDO.Schema.GeometricPropertyDefinition pGeoPro = new OSGeo.FDO.Schema.GeometricPropertyDefinition("Geometry", "");
            pGeoPro.GeometryTypes = 2;
            pGeoPro.ReadOnly = false;
            pGeoPro.HasMeasure = false;
            pGeoPro.HasElevation = false;
            pPropDefCol.Add(pGeoPro);
            pFeatureClass.GeometryProperty = pGeoPro;

            pClassCollection.Add(pFeatureClass);

            pdbSchemaCom.FeatureSchema = pschema;

            pdbSchemaCom.Execute();


        }

        private 
             OSGeo.FDO.Connections.IConnection m_IConn = null;

        private void Write_Data_Click(object sender, EventArgs e)
        {
         OSGeo.FDO.Commands.Feature.IInsert pInsertConn =  m_IConn.CreateCommand(OSGeo.FDO.Commands.CommandType.CommandType_Insert) as
                OSGeo.FDO.Commands.Feature.IInsert;
            OSGeo.FDO.Expression.Identifier pFeatureClassName = new OSGeo.FDO.Expression.Identifier("Road");
            pInsertConn.FeatureClassName = pFeatureClassName;
            OSGeo.FDO.Commands.PropertyValueCollection pPropertyCol = pInsertConn.PropertyValues;
            DataValue pDataValue = new DataValue(320.0, OSGeo.FDO.Schema.DataType.DataType_Double);

            PropertyValue pPropertyValue = new PropertyValue("道路长度", pDataValue);
            int valueCollectionIndex = pPropertyCol.Add(pPropertyValue);

            // 写入几何对象
            FgfGeometryFactory pFgfGeoFactory = new FgfGeometryFactory();
            OSGeo.FDO.Geometry.CurveSegmentCollection pCurveSegments = new OSGeo.FDO.Geometry.CurveSegmentCollection();

            // 创建一个曲线（道路）
            OSGeo.FDO.Geometry.DirectPositionCollection pPosCol = new OSGeo.FDO.Geometry.DirectPositionCollection();
            pPosCol.Add(pFgfGeoFactory.CreatePositionXY(0, 0));
            pPosCol.Add(pFgfGeoFactory.CreatePositionXY(100, 100));


            pCurveSegments.Add(pFgfGeoFactory.CreateLineStringSegment(pPosCol));
            ICurveString pCurveString = pFgfGeoFactory.CreateCurveString(pCurveSegments);
            GeometryValue pGeoValue = new GeometryValue(pFgfGeoFactory.GetFgf(pCurveString));
            valueCollectionIndex = pPropertyCol.Add(new PropertyValue("Geometry", pGeoValue));

            OSGeo.FDO.Commands.Feature.IFeatureReader pReader = pInsertConn.Execute();

            //




        }

        private void Close_DB_Click(object sender, EventArgs e)
        {
            if(m_IConn != null) 
           {
                m_IConn.Close();
                m_IConn = null;
            }
        }

        private void Read_Data_Click(object sender, EventArgs e)
        {
            OSGeo.FDO.Commands.Feature.ISelect pSelectConn = m_IConn.CreateCommand(OSGeo.FDO.Commands.CommandType.CommandType_Select) as
               OSGeo.FDO.Commands.Feature.ISelect;
            OSGeo.FDO.Expression.Identifier pFeatureClassName = new OSGeo.FDO.Expression.Identifier("Road");
            pSelectConn.FeatureClassName = pFeatureClassName;

            pSelectConn.SetFilter("select * from Road");


            pSelectConn.Execute();
 

            //


        }
    }
}
